// Generated by go-postgres-codegen 1
package persistence

import (
	"context"
	"fmt"

	"github.com/jackc/pgx/v4"
)

const PropertiesInsertSql = `
	INSERT INTO 
		public.properties
	(
		id,
		name
	)
	VALUES
		($1,$2)
`

const PropertiesUpdateSql = `
	UPDATE 
		public.properties
	SET
		id=$1,
		name=$2
	WHERE
		id=$3
`

const PropertiesDeleteSql = `
	DELETE FROM
		public.properties
	WHERE
		id=$1
`

type Properties struct {
	Id   int64  `db:"id"`
	Name string `db:"name"`
}

func (self *Properties) InsertTx(tx *pgx.Tx) (int64, error) {
	commandTag, err := (*tx).Exec(context.Background(), PropertiesInsertSql,
		self.Id,
		self.Name,
	)

	return commandTag.RowsAffected(), err
}

func BatchInsertProperties(tx *pgx.Tx, batch *[]Properties) (int64, error) {
	vals := []interface{}{}
	stmt := `
	INSERT INTO 
		public.properties
	(
		id,
		name
	)
	VALUES `
	c := 0
	for i, item := range *batch {
		stmt = stmt + fmt.Sprintf(`($%d,$%d)`, c+1, c+2)
		if i < len(*batch)-1 {
			stmt = stmt + ","
		}
		vals = append(vals, item.Id, item.Name)
		c = c + 2
	}

	commandTag, err := (*tx).Exec(context.Background(), stmt, vals...)

	return commandTag.RowsAffected(), err
}

func StrBatchInsertProperties(batchSize int) string {
	stmt := `
	INSERT INTO 
		public.properties
	(
		id,
		name
	)
	VALUES `
	c := 0
	for i := 0; i < batchSize; i++ {
		stmt = stmt + fmt.Sprintf(`($%d,$%d)`, c+1, c+2)
		if i < batchSize-1 {
			stmt = stmt + ","
		}
		c = c + 2
	}
	return stmt
}

func (self *Properties) UpdateTx(tx *pgx.Tx) (int64, error) {
	commandTag, err := (*tx).Exec(context.Background(), PropertiesUpdateSql,
		self.Id,
		self.Name,
		self.Id,
	)

	return commandTag.RowsAffected(), err
}

func (self *Properties) DeleteTx(tx *pgx.Tx) (int64, error) {
	commandTag, err := (*tx).Exec(context.Background(), PropertiesDeleteSql, self.Id)

	return commandTag.RowsAffected(), err
}

func (self *Properties) Scan(rows *pgx.Rows, extensions ...PersistenceExtension) {
	vals, _ := (*rows).Values()
	for i, f := range (*rows).FieldDescriptions() {
		val := vals[i]
		switch string(f.Name) {
		case "id":
			self.Id = val.(int64)
		case "name":
			self.Name = val.(string)
		default:
			for _, extension := range extensions {
				extension.Extend(string(f.Name), val)
			}
		}
	}
}
