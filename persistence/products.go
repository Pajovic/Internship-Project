// Generated by go-postgres-codegen 1
package persistence

import (
	"context"
	"fmt"

	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

const ProductsInsertSql = `
	INSERT INTO 
		public.products
	(
		id,
		name,
		price,
		quantity,
		idc
	)
	VALUES
		($1,$2,$3,$4,$5)
`

const ProductsUpdateSql = `
	UPDATE 
		public.products
	SET
		id=$1,
		name=$2,
		price=$3,
		quantity=$4,
		idc=$5
	WHERE
		id=$6
`

const ProductsDeleteSql = `
	DELETE FROM
		public.products
	WHERE
		id=$1
`

type Products struct {
	Id       pgtype.UUID `db:"id"`
	Name     string      `db:"name"`
	Price    float32     `db:"price"`
	Quantity int32       `db:"quantity"`
	Idc      pgtype.UUID `db:"idc"`
}

func (self *Products) InsertTx(tx *pgx.Tx) (int64, error) {
	commandTag, err := (*tx).Exec(context.Background(), ProductsInsertSql,
		self.Id,
		self.Name,
		self.Price,
		self.Quantity,
		self.Idc,
	)

	return commandTag.RowsAffected(), err
}

func BatchInsertProducts(tx *pgx.Tx, batch *[]Products) (int64, error) {
	vals := []interface{}{}
	stmt := `
	INSERT INTO 
		public.products
	(
		id,
		name,
		price,
		quantity,
		idc
	)
	VALUES `
	c := 0
	for i, item := range *batch {
		stmt = stmt + fmt.Sprintf(`($%d,$%d,$%d,$%d,$%d)`, c+1, c+2, c+3, c+4, c+5)
		if i < len(*batch)-1 {
			stmt = stmt + ","
		}
		vals = append(vals, item.Id, item.Name, item.Price, item.Quantity, item.Idc)
		c = c + 5
	}

	commandTag, err := (*tx).Exec(context.Background(), stmt, vals...)

	return commandTag.RowsAffected(), err
}

func StrBatchInsertProducts(batchSize int) string {
	stmt := `
	INSERT INTO 
		public.products
	(
		id,
		name,
		price,
		quantity,
		idc
	)
	VALUES `
	c := 0
	for i := 0; i < batchSize; i++ {
		stmt = stmt + fmt.Sprintf(`($%d,$%d,$%d,$%d,$%d)`, c+1, c+2, c+3, c+4, c+5)
		if i < batchSize-1 {
			stmt = stmt + ","
		}
		c = c + 5
	}
	return stmt
}

func (self *Products) UpdateTx(tx *pgx.Tx) (int64, error) {
	commandTag, err := (*tx).Exec(context.Background(), ProductsUpdateSql,
		self.Id,
		self.Name,
		self.Price,
		self.Quantity,
		self.Idc,
		self.Id,
	)

	return commandTag.RowsAffected(), err
}

func (self *Products) DeleteTx(tx *pgx.Tx) (int64, error) {
	commandTag, err := (*tx).Exec(context.Background(), ProductsDeleteSql, self.Id)

	return commandTag.RowsAffected(), err
}

func (self *Products) Scan(rows *pgx.Rows, extensions ...PersistenceExtension) {
	vals, _ := (*rows).Values()
	for i, f := range (*rows).FieldDescriptions() {
		val := vals[i]
		switch string(f.Name) {
		case "id":

			temp := val.([16]uint8)
			uuidVal := pgtype.UUID{}
			uuidVal.Set(temp)
			self.Id = uuidVal

		case "name":
			self.Name = val.(string)
		case "price":
			self.Price = val.(float32)
		case "quantity":
			self.Quantity = val.(int32)
		case "idc":

			temp := val.([16]uint8)
			uuidVal := pgtype.UUID{}
			uuidVal.Set(temp)
			self.Idc = uuidVal

		default:
			for _, extension := range extensions {
				extension.Extend(string(f.Name), val)
			}
		}
	}
}
