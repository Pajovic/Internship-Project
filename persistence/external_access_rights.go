// Generated by go-postgres-codegen 1
package persistence

import (
	"context"
	"fmt"

	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

const ExternalAccessRightsInsertSql = `
	INSERT INTO 
		public.external_access_rights
	(
		id,
		idsc,
		idrc,
		r,
		u,
		d,
		approved
	)
	VALUES
		($1,$2,$3,$4,$5,$6,$7)
`

const ExternalAccessRightsUpdateSql = `
	UPDATE 
		public.external_access_rights
	SET
		id=$1,
		idsc=$2,
		idrc=$3,
		r=$4,
		u=$5,
		d=$6,
		approved=$7
	WHERE
		id=$8
`

const ExternalAccessRightsDeleteSql = `
	DELETE FROM
		public.external_access_rights
	WHERE
		id=$1
`

type ExternalAccessRights struct {
	Id       pgtype.UUID `db:"id"`
	Idsc     pgtype.UUID `db:"idsc"`
	Idrc     pgtype.UUID `db:"idrc"`
	R        bool        `db:"r"`
	U        bool        `db:"u"`
	D        bool        `db:"d"`
	Approved bool        `db:"approved"`
}

func (self *ExternalAccessRights) InsertTx(tx *pgx.Tx) (int64, error) {
	commandTag, err := (*tx).Exec(context.Background(), ExternalAccessRightsInsertSql,
		self.Id,
		self.Idsc,
		self.Idrc,
		self.R,
		self.U,
		self.D,
		self.Approved,
	)

	return commandTag.RowsAffected(), err
}

func BatchInsertExternalAccessRights(tx *pgx.Tx, batch *[]ExternalAccessRights) (int64, error) {
	vals := []interface{}{}
	stmt := `
	INSERT INTO 
		public.external_access_rights
	(
		id,
		idsc,
		idrc,
		r,
		u,
		d,
		approved
	)
	VALUES `
	c := 0
	for i, item := range *batch {
		stmt = stmt + fmt.Sprintf(`($%d,$%d,$%d,$%d,$%d,$%d,$%d)`, c+1, c+2, c+3, c+4, c+5, c+6, c+7)
		if i < len(*batch)-1 {
			stmt = stmt + ","
		}
		vals = append(vals, item.Id, item.Idsc, item.Idrc, item.R, item.U, item.D, item.Approved)
		c = c + 7
	}

	commandTag, err := (*tx).Exec(context.Background(), stmt, vals...)

	return commandTag.RowsAffected(), err
}

func StrBatchInsertExternalAccessRights(batchSize int) string {
	stmt := `
	INSERT INTO 
		public.external_access_rights
	(
		id,
		idsc,
		idrc,
		r,
		u,
		d,
		approved
	)
	VALUES `
	c := 0
	for i := 0; i < batchSize; i++ {
		stmt = stmt + fmt.Sprintf(`($%d,$%d,$%d,$%d,$%d,$%d,$%d)`, c+1, c+2, c+3, c+4, c+5, c+6, c+7)
		if i < batchSize-1 {
			stmt = stmt + ","
		}
		c = c + 7
	}
	return stmt
}

func (self *ExternalAccessRights) UpdateTx(tx *pgx.Tx) (int64, error) {
	commandTag, err := (*tx).Exec(context.Background(), ExternalAccessRightsUpdateSql,
		self.Id,
		self.Idsc,
		self.Idrc,
		self.R,
		self.U,
		self.D,
		self.Approved,
		self.Id,
	)

	return commandTag.RowsAffected(), err
}

func (self *ExternalAccessRights) DeleteTx(tx *pgx.Tx) (int64, error) {
	commandTag, err := (*tx).Exec(context.Background(), ExternalAccessRightsDeleteSql, self.Id)

	return commandTag.RowsAffected(), err
}

func (self *ExternalAccessRights) Scan(rows *pgx.Rows, extensions ...PersistenceExtension) {
	vals, _ := (*rows).Values()
	for i, f := range (*rows).FieldDescriptions() {
		val := vals[i]
		switch string(f.Name) {
		case "id":

			temp := val.([16]uint8)
			uuidVal := pgtype.UUID{}
			uuidVal.Set(temp)
			self.Id = uuidVal

		case "idsc":

			temp := val.([16]uint8)
			uuidVal := pgtype.UUID{}
			uuidVal.Set(temp)
			self.Idsc = uuidVal

		case "idrc":

			temp := val.([16]uint8)
			uuidVal := pgtype.UUID{}
			uuidVal.Set(temp)
			self.Idrc = uuidVal

		case "r":
			self.R = val.(bool)
		case "u":
			self.U = val.(bool)
		case "d":
			self.D = val.(bool)
		case "approved":
			self.Approved = val.(bool)
		default:
			for _, extension := range extensions {
				extension.Extend(string(f.Name), val)
			}
		}
	}
}
