// Generated by go-postgres-codegen 1
package persistence

import (
	"context"
	"fmt"

	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

const ShopsInsertSql = `
	INSERT INTO 
		public.shops
	(
		id,
		name,
		idc,
		lat,
		lon
	)
	VALUES
		($1,$2,$3,$4,$5)
`

const ShopsUpdateSql = `
	UPDATE 
		public.shops
	SET
		id=$1,
		name=$2,
		idc=$3,
		lat=$4,
		lon=$5
	WHERE
		id=$6
`

const ShopsDeleteSql = `
	DELETE FROM
		public.shops
	WHERE
		id=$1
`

type Shops struct {
	Id   pgtype.UUID `db:"id"`
	Name string      `db:"name"`
	Idc  pgtype.UUID `db:"idc"`
	Lat  float64     `db:"lat"`
	Lon  float64     `db:"lon"`
}

func (self *Shops) InsertTx(tx *pgx.Tx) (int64, error) {
	commandTag, err := (*tx).Exec(context.Background(), ShopsInsertSql,
		self.Id,
		self.Name,
		self.Idc,
		self.Lat,
		self.Lon,
	)

	return commandTag.RowsAffected(), err
}

func BatchInsertShops(tx *pgx.Tx, batch *[]Shops) (int64, error) {
	vals := []interface{}{}
	stmt := `
	INSERT INTO 
		public.shops
	(
		id,
		name,
		idc,
		lat,
		lon
	)
	VALUES `
	c := 0
	for i, item := range *batch {
		stmt = stmt + fmt.Sprintf(`($%d,$%d,$%d,$%d,$%d)`, c+1, c+2, c+3, c+4, c+5)
		if i < len(*batch)-1 {
			stmt = stmt + ","
		}
		vals = append(vals, item.Id, item.Name, item.Idc, item.Lat, item.Lon)
		c = c + 5
	}

	commandTag, err := (*tx).Exec(context.Background(), stmt, vals...)

	return commandTag.RowsAffected(), err
}

func StrBatchInsertShops(batchSize int) string {
	stmt := `
	INSERT INTO 
		public.shops
	(
		id,
		name,
		idc,
		lat,
		lon
	)
	VALUES `
	c := 0
	for i := 0; i < batchSize; i++ {
		stmt = stmt + fmt.Sprintf(`($%d,$%d,$%d,$%d,$%d)`, c+1, c+2, c+3, c+4, c+5)
		if i < batchSize-1 {
			stmt = stmt + ","
		}
		c = c + 5
	}
	return stmt
}

func (self *Shops) UpdateTx(tx *pgx.Tx) (int64, error) {
	commandTag, err := (*tx).Exec(context.Background(), ShopsUpdateSql,
		self.Id,
		self.Name,
		self.Idc,
		self.Lat,
		self.Lon,
		self.Id,
	)

	return commandTag.RowsAffected(), err
}

func (self *Shops) DeleteTx(tx *pgx.Tx) (int64, error) {
	commandTag, err := (*tx).Exec(context.Background(), ShopsDeleteSql, self.Id)

	return commandTag.RowsAffected(), err
}

func (self *Shops) Scan(rows *pgx.Rows, extensions ...PersistenceExtension) {
	vals, _ := (*rows).Values()
	for i, f := range (*rows).FieldDescriptions() {
		val := vals[i]
		switch string(f.Name) {
		case "id":

			temp := val.([16]uint8)
			uuidVal := pgtype.UUID{}
			uuidVal.Set(temp)
			self.Id = uuidVal

		case "name":
			self.Name = val.(string)
		case "idc":

			temp := val.([16]uint8)
			uuidVal := pgtype.UUID{}
			uuidVal.Set(temp)
			self.Idc = uuidVal

		case "lat":
			self.Lat = val.(float64)
		case "lon":
			self.Lon = val.(float64)
		default:
			for _, extension := range extensions {
				extension.Extend(string(f.Name), val)
			}
		}
	}
}
